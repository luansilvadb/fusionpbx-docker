name: FusionPBX Multi-Arch Build

on:
  push:
    branches:
      - main # Ou a branch que você usa para releases
  pull_request:
    branches:
      - main
  workflow_dispatch: # Permite acionar manualmente

env:
  # MUDE ESTES VALORES:
  DOCKER_IMAGE_OWNER: your-dockerhub-username # Seu usuário no Docker Hub ou outro registro
  DOCKER_IMAGE_NAME: fusionpbx
  # O script build-freeswitch.sh usa 'crazyquark' como prefixo para as imagens base.
  # Se você forkar e modificar, pode querer mudar isso também nos scripts.
  FREESWITCH_BASE_IMAGE_OWNER: crazyquark # Mantendo o original do script

jobs:
  build_and_push:
    name: Build and Push Multi-Arch Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write # Necessário se estiver usando GitHub Packages Registry

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm,arm64 # Adicione outras plataformas se necessário

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request' # Não faz login em PRs de forks por segurança
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }} # Crie este secret no seu repositório GitHub
          password: ${{ secrets.DOCKER_PASSWORD }} # Crie este secret no seu repositório GitHub

      # Etapa 1: Construir as imagens base do FreeSWITCH (uma por arquitetura)
      # O script build-freeswitch.sh já usa buildx e --load,
      # então as imagens ficam disponíveis localmente para os próximos passos.
      - name: Build FreeSWITCH base image (amd64)
        run: |
          chmod +x build-freeswitch.sh
          # Força a construção para linux/amd64
          DOCKER_BUILD_ARCHS=linux/amd64 ./build-freeswitch.sh amd64

      - name: Build FreeSWITCH base image (armv7)
        run: |
          chmod +x build-freeswitch.sh
          # Força a construção para linux/arm/v7
          DOCKER_BUILD_ARCHS=linux/arm/v7 ./build-freeswitch.sh armv7

      # (Opcional) Adicione aqui para arm64 se você modificou o script e adicionou Dockerfile.arm64
      # - name: Build FreeSWITCH base image (arm64)
      #   run: |
      #     chmod +x build-freeswitch.sh
      #     # Força a construção para linux/arm64
      #     DOCKER_BUILD_ARCHS=linux/arm64 ./build-freeswitch.sh arm64

      # Etapa 2: Construir e "pushar" a imagem FusionPBX para cada arquitetura
      # Usaremos tags específicas de arquitetura e SHA para versionamento.
      - name: Get current date for tag
        id: date
        run: echo "date=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

      - name: Define image tags
        id: meta
        run: |
          VERSION_TAG="${{ steps.date.outputs.date }}-${{ github.sha }}"
          LATEST_TAG="latest"
          if [[ "${{ github.ref }}" != "refs/heads/main" && "${{ github.event_name }}" != "workflow_dispatch" ]]; then
            VERSION_TAG="pr-${{ github.event.number }}-${{ github.sha }}"
            LATEST_TAG="pr-${{ github.event.number }}"
          fi
          echo "version_tag=${VERSION_TAG}" >> $GITHUB_OUTPUT
          echo "latest_tag=${LATEST_TAG}" >> $GITHUB_OUTPUT
          echo "Image base: ${{ env.DOCKER_IMAGE_OWNER }}/${{ env.DOCKER_IMAGE_NAME }}"

      - name: Build and push FusionPBX (linux/amd64)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          build-args: |
            ARCH=amd64
          tags: |
            ${{ env.DOCKER_IMAGE_OWNER }}/${{ env.DOCKER_IMAGE_NAME }}:amd64-${{ steps.meta.outputs.version_tag }}
            ${{ env.DOCKER_IMAGE_OWNER }}/${{ env.DOCKER_IMAGE_NAME }}:amd64-${{ steps.meta.outputs.latest_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push FusionPBX (linux/arm/v7)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/arm/v7
          push: ${{ github.event_name != 'pull_request' }}
          build-args: |
            ARCH=armv7
          tags: |
            ${{ env.DOCKER_IMAGE_OWNER }}/${{ env.DOCKER_IMAGE_NAME }}:armv7-${{ steps.meta.outputs.version_tag }}
            ${{ env.DOCKER_IMAGE_OWNER }}/${{ env.DOCKER_IMAGE_NAME }}:armv7-${{ steps.meta.outputs.latest_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # (Opcional) Adicione aqui para arm64
      # - name: Build and push FusionPBX (linux/arm64)
      #   uses: docker/build-push-action@v5
      #   with:
      #     context: .
      #     file: ./Dockerfile
      #     platforms: linux/arm64
      #     push: ${{ github.event_name != 'pull_request' }}
      #     build-args: |
      #       ARCH=arm64 # Você precisaria garantir que crazyquark/freeswitch-arm64:base foi construído
      #     tags: |
      #       ${{ env.DOCKER_IMAGE_OWNER }}/${{ env.DOCKER_IMAGE_NAME }}:arm64-${{ steps.meta.outputs.version_tag }}
      #       ${{ env.DOCKER_IMAGE_OWNER }}/${{ env.DOCKER_IMAGE_NAME }}:arm64-${{ steps.meta.outputs.latest_tag }}
      #     cache-from: type=gha
      #     cache-to: type=gha,mode=max

      # Etapa 3: Criar e "pushar" o manifest multi-arch
      - name: Create and push Docker Manifest
        if: github.event_name != 'pull_request'
        run: |
          docker manifest create ${{ env.DOCKER_IMAGE_OWNER }}/${{ env.DOCKER_IMAGE_NAME }}:${{ steps.meta.outputs.latest_tag }} \
            --amend ${{ env.DOCKER_IMAGE_OWNER }}/${{ env.DOCKER_IMAGE_NAME }}:amd64-${{ steps.meta.outputs.latest_tag }} \
            --amend ${{ env.DOCKER_IMAGE_OWNER }}/${{ env.DOCKER_IMAGE_NAME }}:armv7-${{ steps.meta.outputs.latest_tag }}
            # (Opcional) Adicione a imagem arm64 aqui se construída:
            # --amend ${{ env.DOCKER_IMAGE_OWNER }}/${{ env.DOCKER_IMAGE_NAME }}:arm64-${{ steps.meta.outputs.latest_tag }}
          docker manifest push ${{ env.DOCKER_IMAGE_OWNER }}/${{ env.DOCKER_IMAGE_NAME }}:${{ steps.meta.outputs.latest_tag }}

          # Se você também quiser um manifest para a tag de versão completa:
          docker manifest create ${{ env.DOCKER_IMAGE_OWNER }}/${{ env.DOCKER_IMAGE_NAME }}:${{ steps.meta.outputs.version_tag }} \
            --amend ${{ env.DOCKER_IMAGE_OWNER }}/${{ env.DOCKER_IMAGE_NAME }}:amd64-${{ steps.meta.outputs.version_tag }} \
            --amend ${{ env.DOCKER_IMAGE_OWNER }}/${{ env.DOCKER_IMAGE_NAME }}:armv7-${{ steps.meta.outputs.version_tag }}
            # (Opcional) Adicione a imagem arm64 aqui se construída:
            # --amend ${{ env.DOCKER_IMAGE_OWNER }}/${{ env.DOCKER_IMAGE_NAME }}:arm64-${{ steps.meta.outputs.version_tag }}
          docker manifest push ${{ env.DOCKER_IMAGE_OWNER }}/${{ env.DOCKER_IMAGE_NAME }}:${{ steps.meta.outputs.version_tag }}

  # Job opcional para testar usando docker-compose
  # Este job rodará na arquitetura do runner (provavelmente amd64)
  test_with_compose:
    name: Test with Docker Compose
    runs-on: ubuntu-latest
    needs: build_and_push # Só roda se o build_and_push for bem sucedido
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Só testa em push para main

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub (para puxar a imagem de teste)
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull the specific architecture image for testing
        run: |
          # O docker-compose.yml usa 'crazyquark/fusionpbx:latest'
          # Precisamos garantir que ele use a imagem que acabamos de construir.
          # Vamos puxar a imagem que o manifest `latest` apontaria para a arquitetura do runner.
          # Ou, podemos modificar o docker-compose.yml para usar a tag mais específica.
          # Por simplicidade, vamos assumir que o compose file usa uma imagem que será
          # substituída pela que puxarmos aqui (se o nome for o mesmo).
          # O docker-compose.yml original usa crazyquark/fusionpbx:latest
          # Nosso workflow está publicando como your-dockerhub-username/fusionpbx:latest

          # Para testar, você pode:
          # 1. Modificar o docker-compose.yml no runner para usar a imagem correta:
          sed -i 's|image: crazyquark/fusionpbx:latest|image: ${{ env.DOCKER_IMAGE_OWNER }}/${{ env.DOCKER_IMAGE_NAME }}:latest|g' docker-compose.yml
          echo "Updated docker-compose.yml to use image: ${{ env.DOCKER_IMAGE_OWNER }}/${{ env.DOCKER_IMAGE_NAME }}:latest"
          cat docker-compose.yml # Para debug

          # Puxa a imagem (o manifest resolverá para a arquitetura do runner, ex: amd64)
          docker pull ${{ env.DOCKER_IMAGE_OWNER }}/${{ env.DOCKER_IMAGE_NAME }}:latest

      - name: Start services with Docker Compose
        run: docker-compose up -d

      - name: Wait for services to be ready
        run: |
          echo "Waiting for FusionPBX to start..."
          sleep 60 # Aumente se necessário

      - name: Check running containers
        run: |
          docker-compose ps
          # Verifica se o container fusionpbx está rodando
          if [ $(docker-compose ps -q fusionpbx | wc -l) -lt 1 ]; then
            echo "FusionPBX container failed to start!"
            docker-compose logs
            exit 1
          else
            echo "FusionPBX container is running."
          fi

      # Adicione testes mais específicos aqui (ex: curl para um endpoint de health check)

      - name: Show FusionPBX logs
        if: always() # Sempre mostra os logs, mesmo se passos anteriores falharem
        run: docker-compose logs fusionpbx

      - name: Stop services
        if: always()
        run: docker-compose down
